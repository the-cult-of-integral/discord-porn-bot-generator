"""
Bot generated by the-cult-of-integral
https://github.com/the-cult-of-integral/discord-porn-bot-generator
"""

import logging
import os
from itertools import cycle

import discord
import requests
from discord.ext import commands, tasks

import databases

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    datefmt='%d-%b-%y %H:%M:%S', filename='LOG.log', filemode='w')


def clear() -> None:
    """
    Clear the screen, for the three major platforms
    """
    if os.name == 'nt':
        os.system('cls')
    elif os.name == 'posix':
        os.system('clear')
    else:
        print('\n' * 100)
    return


intents = discord.Intents.default()
intents.members = True
bot = commands.Bot(command_prefix='PREFIX', intents=intents)
bot.remove_command('help')
status = cycle(STATUSES)

bot_db = databases.Databases()


@bot.command()
@commands.is_owner()
async def load(ctx, ext) -> None:
    bot.load_extension(f'cogs.{ext}')
    embed = discord.Embed(title='Extension loaded!',
                          description=f'{ext} has been loaded.',
                          color=discord.Colour.green())
    await ctx.send(embed=embed)
    return


@bot.command()
@commands.is_owner()
async def unload(ctx, ext) -> None:
    bot.unload_extension(f'cogs.{ext}')
    embed = discord.Embed(title='Extension unloaded!',
                          description=f'{ext} has been unloaded.',
                          color=discord.Colour.green())
    await ctx.send(embed=embed)
    return


@bot.command()
@commands.is_owner()
async def reload(ctx, ext) -> None:
    bot.unload_extension(f'cogs.{ext}')
    bot.load_extension(f'cogs.{ext}')
    embed = discord.Embed(title='Extension reloaded!',
                          description=f'{ext} has been reloaded.',
                          color=discord.Colour.green())
    await ctx.send(embed=embed)
    return


@bot.event
async def on_command_error(ctx, error) -> None:
    if isinstance(error, commands.CommandNotFound):
        embed = discord.Embed(
            title='Error!',
            description='This command is not recognized; remember, s!help',
            color=discord.Colour.red())
        await ctx.send(embed=embed)

    elif isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title='Error!',
            description='You do not have permission to use this command',
            color=discord.Colour.red())
        await ctx.send(embed=embed)

    elif isinstance(error, commands.NotOwner):
        embed = discord.Embed(title='Error!',
                              description='Only my owner can use this command',
                              color=discord.Colour.red())
        await ctx.send(embed=embed)

    elif isinstance(error, commands.NSFWChannelRequired):
        embed = discord.Embed(
            title='Error!',
            description='This command has been set to NSFW channels only',
            color=discord.Colour.red())
        await ctx.send(embed=embed)

    elif isinstance(error, discord.HTTPException):
        response = requests.get('https://discord.com/api/users/@me')
        time_until_end = response.headers.get('X-RateLimit-Reset-After')
        embed = discord.Embed(title='Error!',
                              description=f'Sorry, we are currently being \
rate limited for approximately {time_until_end} seconds',
                              color=discord.Colour.red())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title='Error!',
                              description=error,
                              color=discord.Colour.red())
        await ctx.send(embed=embed)
    return


@bot.event
async def on_ready() -> None:
    clear()
    print('Bot Ready!')
    logging.info('Bot Ready!')
    change_status.start()
    return


@bot.event
async def on_guild_join(guild):
    bot_db.add_new_guild(guild.id)
    return


@tasks.loop(seconds=10)
async def change_status() -> None:
    await bot.change_presence(activity=discord.Game(next(status)))
    return


def load_all_cogs() -> None:
    for filename in os.listdir(os.path.normpath('./cogs')):
        if filename.endswith('.py'):
            bot.load_extension(f'cogs.{filename[:-3]}')
        else:
            continue
    return


def main() -> None:
    load_all_cogs()
    try:
        bot.run('TOKEN')
        del bot_db
    except Exception as e:
        logging.error(e)
        del bot_db
    return


if __name__ == '__main__':
    main()
